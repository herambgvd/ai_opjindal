# Generated by Django 5.2.4 on 2025-07-31 10:33

import django.db.models.deletion
import timescale.db.models.fields
import uuid
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='DailyPeakView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('date', models.DateField()),
                ('peak_in_count', models.PositiveIntegerField()),
                ('peak_out_count', models.PositiveIntegerField()),
                ('peak_total_count', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'cross_counting_daily_peaks',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='HourlyAggregateView',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('hour', models.DateTimeField()),
                ('max_in_count', models.PositiveIntegerField()),
                ('max_out_count', models.PositiveIntegerField()),
                ('max_total_count', models.PositiveIntegerField()),
                ('min_in_count', models.PositiveIntegerField()),
                ('min_out_count', models.PositiveIntegerField()),
                ('min_total_count', models.PositiveIntegerField()),
                ('avg_total_count', models.FloatField()),
                ('data_points', models.PositiveIntegerField()),
            ],
            options={
                'db_table': 'cross_counting_hourly_aggregates',
                'managed': False,
            },
        ),
        migrations.CreateModel(
            name='Region',
            fields=[
                ('id', models.AutoField(primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=100, unique=True)),
                ('occupancy', models.PositiveIntegerField(db_index=True, default=0, help_text='Maximum allowed occupancy for this tag')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
            ],
            options={
                'ordering': ['name'],
                'indexes': [models.Index(fields=['name'], name='cross_count_name_aa42b9_idx'), models.Index(fields=['occupancy'], name='cross_count_occupan_6aaff8_idx'), models.Index(fields=['created_at'], name='cross_count_created_702e6c_idx')],
            },
        ),
        migrations.CreateModel(
            name='Camera',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('name', models.CharField(db_index=True, max_length=200, unique=True)),
                ('rtsp_link', models.CharField(max_length=500)),
                ('hls_link', models.CharField(max_length=500)),
                ('status', models.BooleanField(db_index=True, default=True)),
                ('last_data_received', models.DateTimeField(blank=True, db_index=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('region', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='cameras', to='cross_counting.region')),
            ],
            options={
                'ordering': ['name'],
            },
        ),
        migrations.CreateModel(
            name='CrossCountingData',
            fields=[
                ('id', models.BigAutoField(primary_key=True, serialize=False)),
                ('time', timescale.db.models.fields.TimescaleDateTimeField(blank=True, db_index=True, interval='1 day', null=True)),
                ('device_name', models.CharField(db_index=True, max_length=200)),
                ('device_ip', models.GenericIPAddressField(db_index=True)),
                ('device_mac', models.CharField(max_length=17)),
                ('device_phy', models.CharField(blank=True, max_length=50)),
                ('channel', models.CharField(db_index=True, max_length=200)),
                ('channel_alias', models.CharField(blank=True, max_length=200)),
                ('cc_in_count', models.PositiveIntegerField(default=0)),
                ('cc_out_count', models.PositiveIntegerField(default=0)),
                ('cc_total_count', models.PositiveIntegerField(default=0)),
                ('alarm_snapshot', models.BooleanField(default=False)),
                ('alarm_subtype', models.CharField(db_index=True, max_length=50)),
                ('alarm_status', models.BooleanField(db_index=True, default=False)),
                ('record_flag', models.CharField(blank=True, max_length=10)),
                ('subscribe_id', models.PositiveIntegerField(blank=True, null=True)),
                ('data_pos', models.PositiveIntegerField(blank=True, null=True)),
                ('alarm_time', models.DateTimeField(db_index=True)),
                ('created_at', models.DateTimeField(auto_now_add=True, db_index=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('camera', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='cross_counting_data', to='cross_counting.camera')),
            ],
            options={
                'db_table': 'cross_counting_data_timeseries',
                'ordering': ['-time', '-alarm_time'],
                'indexes': [models.Index(fields=['time', 'camera'], name='ts_time_camera_idx'), models.Index(fields=['time', 'channel'], name='ts_time_channel_idx'), models.Index(fields=['time', 'device_name'], name='ts_time_device_idx'), models.Index(fields=['camera', 'time', 'cc_total_count'], name='ts_camera_time_total_idx'), models.Index(fields=['channel', 'time', 'cc_in_count', 'cc_out_count'], name='ts_channel_time_counts_idx'), models.Index(condition=models.Q(('alarm_status', True)), fields=['time', 'camera'], name='ts_active_alarms_idx'), models.Index(fields=['alarm_time', 'camera'], name='ts_alarm_time_camera_idx'), models.Index(fields=['alarm_time', 'alarm_status'], name='ts_alarm_time_status_idx'), models.Index(fields=['device_name', 'time', 'alarm_status'], name='ts_device_time_status_idx'), models.Index(fields=['created_at'], name='ts_created_idx')],
            },
        ),
        migrations.AddIndex(
            model_name='camera',
            index=models.Index(fields=['name', 'status'], name='cross_count_name_878f99_idx'),
        ),
        migrations.AddIndex(
            model_name='camera',
            index=models.Index(fields=['last_data_received'], name='cross_count_last_da_58be5a_idx'),
        ),
        migrations.AddIndex(
            model_name='camera',
            index=models.Index(fields=['created_at'], name='cross_count_created_b43980_idx'),
        ),
    ]
